name: Deployment Pipeline

on:
  release:
    types: [published]
  workflow_dispatch:
    inputs:
      release_type:
        description: 'Release type (patch, minor, major)'
        required: true
        default: 'patch'
        type: choice
        options:
        - patch
        - minor
        - major

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1

jobs:
  create-release:
    name: Create Release
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch'
    outputs:
      tag: ${{ steps.create_tag.outputs.tag }}
      upload_url: ${{ steps.create_release.outputs.upload_url }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Configure git
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
      
      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
      
      - name: Install cargo-release
        run: cargo install cargo-release
      
      - name: Create release
        id: create_tag
        run: |
          cargo release ${{ github.event.inputs.release_type }} --execute --no-confirm
          TAG=$(git describe --tags --abbrev=0)
          echo "tag=$TAG" >> $GITHUB_OUTPUT
      
      - name: Create GitHub release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.create_tag.outputs.tag }}
          release_name: Release ${{ steps.create_tag.outputs.tag }}
          draft: false
          prerelease: false

  build-artifacts:
    name: Build Release Artifacts
    runs-on: ${{ matrix.os }}
    if: github.event_name == 'release' || github.event_name == 'workflow_dispatch'
    needs: [create-release]
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            artifact_name: balatro-rs-linux-x64
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            artifact_name: balatro-rs-windows-x64.exe
          - os: macos-latest
            target: x86_64-apple-darwin
            artifact_name: balatro-rs-macos-x64
          - os: macos-latest
            target: aarch64-apple-darwin
            artifact_name: balatro-rs-macos-arm64
    steps:
      - uses: actions/checkout@v4
      
      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}
      
      - name: Install dependencies (Linux)
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y pkg-config libssl-dev
          
      - name: Install dependencies (macOS)
        if: runner.os == 'macOS'
        run: |
          brew install pkg-config openssl
          
      - name: Install dependencies (Windows)
        if: runner.os == 'Windows'
        run: |
          echo "OPENSSL_DIR=C:\Program Files\OpenSSL-Win64" >> $env:GITHUB_ENV
      
      - name: Cache cargo registry
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
          key: ${{ matrix.os }}-cargo-registry-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ matrix.os }}-cargo-registry-
      
      - name: Build CLI binary
        run: cargo build --release --target ${{ matrix.target }} -p balatro-cli
      
      - name: Prepare artifact (Unix)
        if: runner.os != 'Windows'
        run: |
          mkdir -p artifacts
          cp target/${{ matrix.target }}/release/balatro-cli artifacts/${{ matrix.artifact_name }}
          chmod +x artifacts/${{ matrix.artifact_name }}
      
      - name: Prepare artifact (Windows)
        if: runner.os == 'Windows'
        run: |
          mkdir artifacts
          copy target\${{ matrix.target }}\release\balatro-cli.exe artifacts\${{ matrix.artifact_name }}
      
      - name: Upload artifact
        uses: actions/upload-artifact@v3
        with:
          name: ${{ matrix.artifact_name }}
          path: artifacts/${{ matrix.artifact_name }}
      
      - name: Upload to release
        if: github.event_name == 'release'
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ github.event.release.upload_url }}
          asset_path: artifacts/${{ matrix.artifact_name }}
          asset_name: ${{ matrix.artifact_name }}
          asset_content_type: application/octet-stream

  publish-crates:
    name: Publish to crates.io
    runs-on: ubuntu-latest
    if: github.event_name == 'release'
    needs: [build-artifacts]
    steps:
      - uses: actions/checkout@v4
      
      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
      
      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y pkg-config libssl-dev python3 python3-dev
      
      - name: Cache cargo registry
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
          key: ${{ runner.os }}-cargo-registry-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-registry-
      
      - name: Publish balatro-rs core
        run: |
          cd core
          cargo publish --token ${{ secrets.CARGO_REGISTRY_TOKEN }}
          
      - name: Wait for crates.io propagation
        run: sleep 30
      
      - name: Publish balatro-cli
        run: |
          cd cli
          cargo publish --token ${{ secrets.CARGO_REGISTRY_TOKEN }}

  publish-python:
    name: Publish Python Package
    runs-on: ${{ matrix.os }}
    if: github.event_name == 'release'
    needs: [build-artifacts]
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.8'
      
      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
      
      - name: Install dependencies (Linux)
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y pkg-config libssl-dev python3 python3-dev
          
      - name: Install dependencies (macOS)
        if: runner.os == 'macOS'
        run: |
          brew install pkg-config openssl
          
      - name: Install dependencies (Windows)
        if: runner.os == 'Windows'
        run: |
          echo "OPENSSL_DIR=C:\Program Files\OpenSSL-Win64" >> $env:GITHUB_ENV
      
      - name: Install maturin
        run: pip install maturin
      
      - name: Build wheels
        run: |
          cd pylatro
          maturin build --release
      
      - name: Upload wheels
        uses: actions/upload-artifact@v3
        with:
          name: wheels-${{ matrix.os }}
          path: pylatro/target/wheels/
      
      - name: Publish to PyPI
        if: matrix.os == 'ubuntu-latest'
        env:
          MATURIN_PYPI_TOKEN: ${{ secrets.PYPI_TOKEN }}
        run: |
          cd pylatro
          maturin publish --skip-existing

  deploy-docs:
    name: Deploy Documentation
    runs-on: ubuntu-latest
    if: github.event_name == 'release'
    needs: [build-artifacts]
    steps:
      - uses: actions/checkout@v4
      
      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
      
      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y pkg-config libssl-dev
      
      - name: Cache cargo registry
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
          key: ${{ runner.os }}-cargo-registry-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-registry-
      
      - name: Build documentation
        run: cargo doc --all --no-deps
      
      - name: Deploy to GitHub Pages
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./target/doc
          cname: balatro-rs-docs.example.com  # Update with actual domain if needed