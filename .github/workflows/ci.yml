name: CI

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1

jobs:
  test:
    name: Test Suite
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v4
      
      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
      
      - name: Install dependencies (Linux)
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y pkg-config libssl-dev python3 python3-dev
          
      - name: Install dependencies (macOS)
        if: runner.os == 'macOS'
        run: |
          brew install pkg-config openssl python3
          
      - name: Install dependencies (Windows)
        if: runner.os == 'Windows'
        run: |
          choco install python3 --yes
          echo "OPENSSL_DIR=C:\Program Files\OpenSSL-Win64" >> $GITHUB_ENV
      
      - name: Cache cargo registry
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
          key: ${{ matrix.os }}-cargo-registry-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ matrix.os }}-cargo-registry-
      
      - name: Cache cargo build
        uses: actions/cache@v3
        with:
          path: target
          key: ${{ matrix.os }}-cargo-build-target-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ matrix.os }}-cargo-build-target-
      
      - name: Run tests
        run: |
          # Run all tests with verbose output
          cargo test --all --verbose
          
      - name: Generate test summary
        if: always()
        run: |
          echo "## Test Results Summary" > test_summary.md
          echo "- OS: ${{ matrix.os }}" >> test_summary.md
          echo "- Rust Version: $(rustc --version)" >> test_summary.md
          echo "- Test Run: $(date)" >> test_summary.md
          echo "- Tests completed" >> test_summary.md
          
      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: test-results-${{ matrix.os }}
          path: test_summary.md

  fmt:
    name: Rustfmt
    runs-on: ubuntu-latest
    container:
      image: rust:slim
    steps:
      - uses: actions/checkout@v4
      
      - name: Install rustfmt
        run: rustup component add rustfmt
      
      - name: Check formatting
        run: cargo fmt --all -- --check

  clippy:
    name: Clippy
    runs-on: ubuntu-latest
    container:
      image: rust:slim
    steps:
      - uses: actions/checkout@v4
      
      - name: Install dependencies
        run: |
          apt-get update
          apt-get install -y pkg-config libssl-dev python3 python3-dev
      
      - name: Install clippy
        run: rustup component add clippy
      
      - name: Cache cargo registry
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
          key: ${{ runner.os }}-cargo-registry-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-registry-
      
      - name: Cache cargo build
        uses: actions/cache@v3
        with:
          path: target
          key: ${{ runner.os }}-cargo-build-target-clippy-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-build-target-clippy-
      
      - name: Run clippy
        run: cargo clippy --all -- -D warnings

  coverage:
    name: Code Coverage
    runs-on: ubuntu-latest
    container:
      image: rust:latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Install Python and dependencies
        run: |
          apt-get update
          apt-get install -y python3 python3-dev python3-venv python3-pip pkg-config libssl-dev
          
      - name: Setup Python virtual environment
        run: |
          python3 -m venv /opt/venv
          echo "/opt/venv/bin" >> $GITHUB_PATH
          
      - name: Install LLVM and coverage tools
        run: |
          # Install LLVM for coverage
          apt-get install -y llvm
          # Create cargo bin directory if it doesn't exist
          mkdir -p ~/.cargo/bin
          # Install cargo-llvm-cov
          curl -LsSf https://github.com/taiki-e/cargo-llvm-cov/releases/latest/download/cargo-llvm-cov-x86_64-unknown-linux-gnu.tar.gz | tar xzf - -C ~/.cargo/bin
          # Make sure cargo bin is in PATH
          echo "$HOME/.cargo/bin" >> $GITHUB_PATH
          # Use the virtual environment's pip
          /opt/venv/bin/pip install --upgrade pip
          /opt/venv/bin/pip install maturin pytest pytest-cov
      
      - name: Cache cargo registry
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
          key: ${{ runner.os }}-cargo-registry-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-registry-
      
      - name: Generate Rust code coverage
        run: |
          # Run coverage on core library with Python feature
          cargo llvm-cov --features python,serde,colored --lcov --output-path coverage.lcov -p balatro-rs
      
      - name: Upload Rust coverage to codecov.io
        uses: codecov/codecov-action@v3
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          files: ./coverage.lcov
          flags: rust
          fail_ci_if_error: false
      
      - name: Build Python extension for coverage
        run: |
          cd pylatro
          # Set VIRTUAL_ENV for maturin
          export VIRTUAL_ENV=/opt/venv
          /opt/venv/bin/maturin develop
      
      - name: Run Python tests with coverage
        run: |
          cd pylatro
          # Set VIRTUAL_ENV for consistency
          export VIRTUAL_ENV=/opt/venv
          /opt/venv/bin/python -m pytest test/test_pylatro.py -v --cov=pylatro --cov-report=xml
      
      - name: Upload Python coverage to codecov.io
        uses: codecov/codecov-action@v3
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          files: ./pylatro/coverage.xml
          flags: python
          fail_ci_if_error: false

  # Test Python bindings
  python-test:
    name: Python Bindings Test
    runs-on: ubuntu-latest
    container:
      image: rust:latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Install Python and dependencies
        run: |
          apt-get update
          apt-get install -y python3 python3-dev python3-venv python3-pip pkg-config libssl-dev
          
      - name: Setup Python virtual environment
        run: |
          python3 -m venv /opt/venv
          echo "/opt/venv/bin" >> $GITHUB_PATH
          
      - name: Install Python packages
        run: |
          /opt/venv/bin/pip install --upgrade pip
          /opt/venv/bin/pip install maturin pytest
      
      - name: Cache cargo registry
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
          key: ${{ runner.os }}-cargo-registry-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-registry-
      
      - name: Cache cargo build
        uses: actions/cache@v3
        with:
          path: target
          key: ${{ runner.os }}-cargo-build-python-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-build-python-
      
      - name: Build Python extension
        run: |
          cd pylatro
          export VIRTUAL_ENV=/opt/venv
          /opt/venv/bin/maturin develop
      
      - name: Run Python tests
        run: |
          cd pylatro
          export VIRTUAL_ENV=/opt/venv
          /opt/venv/bin/python -m pytest test/test_pylatro.py -v

  # Ensure all workspace members build successfully
  build-all:
    name: Build All Workspace Members
    runs-on: ubuntu-latest
    container:
      image: rust:slim
    strategy:
      matrix:
        member: [balatro-rs, balatro-cli, pylatro]
    steps:
      - uses: actions/checkout@v4
      
      - name: Install dependencies
        run: |
          apt-get update
          apt-get install -y pkg-config libssl-dev python3 python3-dev
      
      - name: Cache cargo registry
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
          key: ${{ runner.os }}-cargo-registry-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-registry-
      
      - name: Cache cargo build
        uses: actions/cache@v3
        with:
          path: target
          key: ${{ runner.os }}-cargo-build-${{ matrix.member }}-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-build-${{ matrix.member }}-
      
      - name: Build workspace member
        run: cargo build -p ${{ matrix.member }} --verbose

  # Run benchmarks to ensure they compile (but don't fail on performance)
  bench-check:
    name: Benchmark Compilation Check
    runs-on: ubuntu-latest
    container:
      image: rust:slim
    steps:
      - uses: actions/checkout@v4
      
      - name: Install dependencies
        run: |
          apt-get update
          apt-get install -y pkg-config libssl-dev python3 python3-dev
      
      - name: Cache cargo registry
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
          key: ${{ runner.os }}-cargo-registry-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-registry-
      
      - name: Cache cargo build
        uses: actions/cache@v3
        with:
          path: target
          key: ${{ runner.os }}-cargo-build-bench-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-build-bench-
      
      - name: Check benchmarks compile
        run: cargo bench --no-run -p balatro-rs

  # Run performance benchmarks and validate against baselines
  performance-test:
    name: Performance Testing
    runs-on: ubuntu-latest
    container:
      image: rust:slim
    steps:
      - uses: actions/checkout@v4
      
      - name: Install dependencies
        run: |
          apt-get update
          apt-get install -y pkg-config libssl-dev python3 python3-dev
      
      - name: Cache cargo registry
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
          key: ${{ runner.os }}-cargo-registry-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-registry-
      
      - name: Cache cargo build
        uses: actions/cache@v3
        with:
          path: target
          key: ${{ runner.os }}-cargo-build-perf-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-build-perf-
      
      - name: Run benchmarks
        run: |
          # Run benchmarks and capture results
          cargo bench -p balatro-rs --verbose > benchmark_results.txt 2>&1 || echo "Benchmarks completed with status $?"
          
      - name: Validate performance
        run: |
          echo "Benchmark execution completed"
          if [ -f benchmark_results.txt ]; then
            echo "Benchmark results file exists"
            # Simple validation - check if file is not empty
            if [ -s benchmark_results.txt ]; then
              echo "Benchmarks completed successfully"
            else
              echo "Warning: Empty benchmark results"
            fi
          else
            echo "Warning: No benchmark results file found"
          fi
          
      - name: Upload benchmark results
        uses: actions/upload-artifact@v3
        with:
          name: benchmark-results
          path: benchmark_results.txt

  # Security and dependency scanning
  security-scan:
    name: Security & Dependency Scanning
    runs-on: ubuntu-latest
    container:
      image: rust:slim
    steps:
      - uses: actions/checkout@v4
      
      - name: Install dependencies
        run: |
          apt-get update
          apt-get install -y pkg-config libssl-dev
      
      - name: Install security tools
        run: |
          cargo install cargo-audit
          cargo install cargo-deny
      
      - name: Cache cargo registry
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
          key: ${{ runner.os }}-cargo-registry-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-registry-
      
      - name: Run cargo audit
        run: cargo audit
        
      - name: Run cargo deny
        run: cargo deny check
          
      - name: Upload security scan results
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: security-scan-results
          path: |
            deny.toml
            *.log